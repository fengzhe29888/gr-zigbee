# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_zigbee_swig', [dirname(__file__)])
        except ImportError:
            import _zigbee_swig
            return _zigbee_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_zigbee_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _zigbee_swig = swig_import_helper()
    del swig_import_helper
else:
    import _zigbee_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
  """high_res_timer_now() -> gr::high_res_timer_type"""
  return _zigbee_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
  """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
  return _zigbee_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
  """high_res_timer_tps() -> gr::high_res_timer_type"""
  return _zigbee_swig.high_res_timer_tps()

def high_res_timer_epoch():
  """high_res_timer_epoch() -> gr::high_res_timer_type"""
  return _zigbee_swig.high_res_timer_epoch()
class fir_filter_fff(object):
    """Proxy of C++ gr::filter::kernel::fir_filter_fff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(gr::filter::kernel::fir_filter_fff self, int decimation, pmt_vector_float taps) -> fir_filter_fff"""
        this = _zigbee_swig.new_fir_filter_fff(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _zigbee_swig.delete_fir_filter_fff
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(fir_filter_fff self, pmt_vector_float taps)"""
        return _zigbee_swig.fir_filter_fff_set_taps(self, *args, **kwargs)

    def update_tap(self, *args, **kwargs):
        """update_tap(fir_filter_fff self, float t, unsigned int index)"""
        return _zigbee_swig.fir_filter_fff_update_tap(self, *args, **kwargs)

    def taps(self):
        """taps(fir_filter_fff self) -> pmt_vector_float"""
        return _zigbee_swig.fir_filter_fff_taps(self)

    def ntaps(self):
        """ntaps(fir_filter_fff self) -> unsigned int"""
        return _zigbee_swig.fir_filter_fff_ntaps(self)

    def filter(self, *args, **kwargs):
        """filter(fir_filter_fff self, float const [] input) -> float"""
        return _zigbee_swig.fir_filter_fff_filter(self, *args, **kwargs)

    def filterN(self, *args, **kwargs):
        """filterN(fir_filter_fff self, float [] output, float const [] input, unsigned long n)"""
        return _zigbee_swig.fir_filter_fff_filterN(self, *args, **kwargs)

    def filterNdec(self, *args, **kwargs):
        """filterNdec(fir_filter_fff self, float [] output, float const [] input, unsigned long n, unsigned int decimate)"""
        return _zigbee_swig.fir_filter_fff_filterNdec(self, *args, **kwargs)

fir_filter_fff_swigregister = _zigbee_swig.fir_filter_fff_swigregister
fir_filter_fff_swigregister(fir_filter_fff)

class fir_filter_ccf(object):
    """Proxy of C++ gr::filter::kernel::fir_filter_ccf class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(gr::filter::kernel::fir_filter_ccf self, int decimation, pmt_vector_float taps) -> fir_filter_ccf"""
        this = _zigbee_swig.new_fir_filter_ccf(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _zigbee_swig.delete_fir_filter_ccf
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(fir_filter_ccf self, pmt_vector_float taps)"""
        return _zigbee_swig.fir_filter_ccf_set_taps(self, *args, **kwargs)

    def update_tap(self, *args, **kwargs):
        """update_tap(fir_filter_ccf self, float t, unsigned int index)"""
        return _zigbee_swig.fir_filter_ccf_update_tap(self, *args, **kwargs)

    def taps(self):
        """taps(fir_filter_ccf self) -> pmt_vector_float"""
        return _zigbee_swig.fir_filter_ccf_taps(self)

    def ntaps(self):
        """ntaps(fir_filter_ccf self) -> unsigned int"""
        return _zigbee_swig.fir_filter_ccf_ntaps(self)

    def filter(self, *args, **kwargs):
        """filter(fir_filter_ccf self, gr_complex const [] input) -> gr_complex"""
        return _zigbee_swig.fir_filter_ccf_filter(self, *args, **kwargs)

    def filterN(self, *args, **kwargs):
        """filterN(fir_filter_ccf self, gr_complex [] output, gr_complex const [] input, unsigned long n)"""
        return _zigbee_swig.fir_filter_ccf_filterN(self, *args, **kwargs)

    def filterNdec(self, *args, **kwargs):
        """filterNdec(fir_filter_ccf self, gr_complex [] output, gr_complex const [] input, unsigned long n, unsigned int decimate)"""
        return _zigbee_swig.fir_filter_ccf_filterNdec(self, *args, **kwargs)

fir_filter_ccf_swigregister = _zigbee_swig.fir_filter_ccf_swigregister
fir_filter_ccf_swigregister(fir_filter_ccf)

class fir_filter_fcc(object):
    """Proxy of C++ gr::filter::kernel::fir_filter_fcc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(gr::filter::kernel::fir_filter_fcc self, int decimation, pmt_vector_cfloat taps) -> fir_filter_fcc"""
        this = _zigbee_swig.new_fir_filter_fcc(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _zigbee_swig.delete_fir_filter_fcc
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(fir_filter_fcc self, pmt_vector_cfloat taps)"""
        return _zigbee_swig.fir_filter_fcc_set_taps(self, *args, **kwargs)

    def update_tap(self, *args, **kwargs):
        """update_tap(fir_filter_fcc self, gr_complex t, unsigned int index)"""
        return _zigbee_swig.fir_filter_fcc_update_tap(self, *args, **kwargs)

    def taps(self):
        """taps(fir_filter_fcc self) -> pmt_vector_cfloat"""
        return _zigbee_swig.fir_filter_fcc_taps(self)

    def ntaps(self):
        """ntaps(fir_filter_fcc self) -> unsigned int"""
        return _zigbee_swig.fir_filter_fcc_ntaps(self)

    def filter(self, *args, **kwargs):
        """filter(fir_filter_fcc self, float const [] input) -> gr_complex"""
        return _zigbee_swig.fir_filter_fcc_filter(self, *args, **kwargs)

    def filterN(self, *args, **kwargs):
        """filterN(fir_filter_fcc self, gr_complex [] output, float const [] input, unsigned long n)"""
        return _zigbee_swig.fir_filter_fcc_filterN(self, *args, **kwargs)

    def filterNdec(self, *args, **kwargs):
        """filterNdec(fir_filter_fcc self, gr_complex [] output, float const [] input, unsigned long n, unsigned int decimate)"""
        return _zigbee_swig.fir_filter_fcc_filterNdec(self, *args, **kwargs)

fir_filter_fcc_swigregister = _zigbee_swig.fir_filter_fcc_swigregister
fir_filter_fcc_swigregister(fir_filter_fcc)

class fir_filter_ccc(object):
    """Proxy of C++ gr::filter::kernel::fir_filter_ccc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(gr::filter::kernel::fir_filter_ccc self, int decimation, pmt_vector_cfloat taps) -> fir_filter_ccc"""
        this = _zigbee_swig.new_fir_filter_ccc(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _zigbee_swig.delete_fir_filter_ccc
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(fir_filter_ccc self, pmt_vector_cfloat taps)"""
        return _zigbee_swig.fir_filter_ccc_set_taps(self, *args, **kwargs)

    def update_tap(self, *args, **kwargs):
        """update_tap(fir_filter_ccc self, gr_complex t, unsigned int index)"""
        return _zigbee_swig.fir_filter_ccc_update_tap(self, *args, **kwargs)

    def taps(self):
        """taps(fir_filter_ccc self) -> pmt_vector_cfloat"""
        return _zigbee_swig.fir_filter_ccc_taps(self)

    def ntaps(self):
        """ntaps(fir_filter_ccc self) -> unsigned int"""
        return _zigbee_swig.fir_filter_ccc_ntaps(self)

    def filter(self, *args, **kwargs):
        """filter(fir_filter_ccc self, gr_complex const [] input) -> gr_complex"""
        return _zigbee_swig.fir_filter_ccc_filter(self, *args, **kwargs)

    def filterN(self, *args, **kwargs):
        """filterN(fir_filter_ccc self, gr_complex [] output, gr_complex const [] input, unsigned long n)"""
        return _zigbee_swig.fir_filter_ccc_filterN(self, *args, **kwargs)

    def filterNdec(self, *args, **kwargs):
        """filterNdec(fir_filter_ccc self, gr_complex [] output, gr_complex const [] input, unsigned long n, unsigned int decimate)"""
        return _zigbee_swig.fir_filter_ccc_filterNdec(self, *args, **kwargs)

fir_filter_ccc_swigregister = _zigbee_swig.fir_filter_ccc_swigregister
fir_filter_ccc_swigregister(fir_filter_ccc)

class fir_filter_scc(object):
    """Proxy of C++ gr::filter::kernel::fir_filter_scc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(gr::filter::kernel::fir_filter_scc self, int decimation, pmt_vector_cfloat taps) -> fir_filter_scc"""
        this = _zigbee_swig.new_fir_filter_scc(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _zigbee_swig.delete_fir_filter_scc
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(fir_filter_scc self, pmt_vector_cfloat taps)"""
        return _zigbee_swig.fir_filter_scc_set_taps(self, *args, **kwargs)

    def update_tap(self, *args, **kwargs):
        """update_tap(fir_filter_scc self, gr_complex t, unsigned int index)"""
        return _zigbee_swig.fir_filter_scc_update_tap(self, *args, **kwargs)

    def taps(self):
        """taps(fir_filter_scc self) -> pmt_vector_cfloat"""
        return _zigbee_swig.fir_filter_scc_taps(self)

    def ntaps(self):
        """ntaps(fir_filter_scc self) -> unsigned int"""
        return _zigbee_swig.fir_filter_scc_ntaps(self)

    def filter(self, *args, **kwargs):
        """filter(fir_filter_scc self, short const [] input) -> gr_complex"""
        return _zigbee_swig.fir_filter_scc_filter(self, *args, **kwargs)

    def filterN(self, *args, **kwargs):
        """filterN(fir_filter_scc self, gr_complex [] output, short const [] input, unsigned long n)"""
        return _zigbee_swig.fir_filter_scc_filterN(self, *args, **kwargs)

    def filterNdec(self, *args, **kwargs):
        """filterNdec(fir_filter_scc self, gr_complex [] output, short const [] input, unsigned long n, unsigned int decimate)"""
        return _zigbee_swig.fir_filter_scc_filterNdec(self, *args, **kwargs)

fir_filter_scc_swigregister = _zigbee_swig.fir_filter_scc_swigregister
fir_filter_scc_swigregister(fir_filter_scc)

class fir_filter_fsf(object):
    """Proxy of C++ gr::filter::kernel::fir_filter_fsf class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(gr::filter::kernel::fir_filter_fsf self, int decimation, pmt_vector_float taps) -> fir_filter_fsf"""
        this = _zigbee_swig.new_fir_filter_fsf(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _zigbee_swig.delete_fir_filter_fsf
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(fir_filter_fsf self, pmt_vector_float taps)"""
        return _zigbee_swig.fir_filter_fsf_set_taps(self, *args, **kwargs)

    def update_tap(self, *args, **kwargs):
        """update_tap(fir_filter_fsf self, float t, unsigned int index)"""
        return _zigbee_swig.fir_filter_fsf_update_tap(self, *args, **kwargs)

    def taps(self):
        """taps(fir_filter_fsf self) -> pmt_vector_float"""
        return _zigbee_swig.fir_filter_fsf_taps(self)

    def ntaps(self):
        """ntaps(fir_filter_fsf self) -> unsigned int"""
        return _zigbee_swig.fir_filter_fsf_ntaps(self)

    def filter(self, *args, **kwargs):
        """filter(fir_filter_fsf self, float const [] input) -> short"""
        return _zigbee_swig.fir_filter_fsf_filter(self, *args, **kwargs)

    def filterN(self, *args, **kwargs):
        """filterN(fir_filter_fsf self, short [] output, float const [] input, unsigned long n)"""
        return _zigbee_swig.fir_filter_fsf_filterN(self, *args, **kwargs)

    def filterNdec(self, *args, **kwargs):
        """filterNdec(fir_filter_fsf self, short [] output, float const [] input, unsigned long n, unsigned int decimate)"""
        return _zigbee_swig.fir_filter_fsf_filterNdec(self, *args, **kwargs)

fir_filter_fsf_swigregister = _zigbee_swig.fir_filter_fsf_swigregister
fir_filter_fsf_swigregister(fir_filter_fsf)

class frame_length_detector(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int const Q, pmt_vector_float symbol_table, int preset_N) -> frame_length_detector_sptr

        Return a shared_ptr to a new instance of zigbee::frame_length_detector.

        To avoid accidental use of raw pointers, zigbee::frame_length_detector's constructor is in a private implementation class. zigbee::frame_length_detector::make is the public interface for creating new instances.

        Params: (Q, symbol_table, preset_N)
        """
        return _zigbee_swig.frame_length_detector_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _zigbee_swig.delete_frame_length_detector
    __del__ = lambda self : None;
frame_length_detector_swigregister = _zigbee_swig.frame_length_detector_swigregister
frame_length_detector_swigregister(frame_length_detector)

def frame_length_detector_make(*args, **kwargs):
  """
    frame_length_detector_make(int const Q, pmt_vector_float symbol_table, int preset_N) -> frame_length_detector_sptr

    Return a shared_ptr to a new instance of zigbee::frame_length_detector.

    To avoid accidental use of raw pointers, zigbee::frame_length_detector's constructor is in a private implementation class. zigbee::frame_length_detector::make is the public interface for creating new instances.

    Params: (Q, symbol_table, preset_N)
    """
  return _zigbee_swig.frame_length_detector_make(*args, **kwargs)

class frame_length_detector_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::zigbee::frame_length_detector)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::zigbee::frame_length_detector)> self) -> frame_length_detector_sptr
        __init__(boost::shared_ptr<(gr::zigbee::frame_length_detector)> self, frame_length_detector p) -> frame_length_detector_sptr
        """
        this = _zigbee_swig.new_frame_length_detector_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(frame_length_detector_sptr self) -> frame_length_detector"""
        return _zigbee_swig.frame_length_detector_sptr___deref__(self)

    __swig_destroy__ = _zigbee_swig.delete_frame_length_detector_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(frame_length_detector_sptr self, int const Q, pmt_vector_float symbol_table, int preset_N) -> frame_length_detector_sptr

        Return a shared_ptr to a new instance of zigbee::frame_length_detector.

        To avoid accidental use of raw pointers, zigbee::frame_length_detector's constructor is in a private implementation class. zigbee::frame_length_detector::make is the public interface for creating new instances.

        Params: (Q, symbol_table, preset_N)
        """
        return _zigbee_swig.frame_length_detector_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(frame_length_detector_sptr self) -> unsigned int"""
        return _zigbee_swig.frame_length_detector_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(frame_length_detector_sptr self, int which, int delay)
        declare_sample_delay(frame_length_detector_sptr self, unsigned int delay)
        """
        return _zigbee_swig.frame_length_detector_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(frame_length_detector_sptr self, int which) -> unsigned int"""
        return _zigbee_swig.frame_length_detector_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(frame_length_detector_sptr self) -> int"""
        return _zigbee_swig.frame_length_detector_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(frame_length_detector_sptr self) -> double"""
        return _zigbee_swig.frame_length_detector_sptr_relative_rate(self)

    def start(self):
        """start(frame_length_detector_sptr self) -> bool"""
        return _zigbee_swig.frame_length_detector_sptr_start(self)

    def stop(self):
        """stop(frame_length_detector_sptr self) -> bool"""
        return _zigbee_swig.frame_length_detector_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(frame_length_detector_sptr self, unsigned int which_input) -> uint64_t"""
        return _zigbee_swig.frame_length_detector_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(frame_length_detector_sptr self, unsigned int which_output) -> uint64_t"""
        return _zigbee_swig.frame_length_detector_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(frame_length_detector_sptr self) -> int"""
        return _zigbee_swig.frame_length_detector_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(frame_length_detector_sptr self, int m)"""
        return _zigbee_swig.frame_length_detector_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(frame_length_detector_sptr self)"""
        return _zigbee_swig.frame_length_detector_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(frame_length_detector_sptr self) -> bool"""
        return _zigbee_swig.frame_length_detector_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(frame_length_detector_sptr self, int m)"""
        return _zigbee_swig.frame_length_detector_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(frame_length_detector_sptr self) -> int"""
        return _zigbee_swig.frame_length_detector_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(frame_length_detector_sptr self, int i) -> long"""
        return _zigbee_swig.frame_length_detector_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(frame_length_detector_sptr self, long max_output_buffer)
        set_max_output_buffer(frame_length_detector_sptr self, int port, long max_output_buffer)
        """
        return _zigbee_swig.frame_length_detector_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(frame_length_detector_sptr self, int i) -> long"""
        return _zigbee_swig.frame_length_detector_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(frame_length_detector_sptr self, long min_output_buffer)
        set_min_output_buffer(frame_length_detector_sptr self, int port, long min_output_buffer)
        """
        return _zigbee_swig.frame_length_detector_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(frame_length_detector_sptr self) -> float"""
        return _zigbee_swig.frame_length_detector_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(frame_length_detector_sptr self) -> float"""
        return _zigbee_swig.frame_length_detector_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(frame_length_detector_sptr self) -> float"""
        return _zigbee_swig.frame_length_detector_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(frame_length_detector_sptr self) -> float"""
        return _zigbee_swig.frame_length_detector_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(frame_length_detector_sptr self) -> float"""
        return _zigbee_swig.frame_length_detector_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(frame_length_detector_sptr self) -> float"""
        return _zigbee_swig.frame_length_detector_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(frame_length_detector_sptr self, int which) -> float
        pc_input_buffers_full(frame_length_detector_sptr self) -> pmt_vector_float
        """
        return _zigbee_swig.frame_length_detector_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(frame_length_detector_sptr self, int which) -> float
        pc_input_buffers_full_avg(frame_length_detector_sptr self) -> pmt_vector_float
        """
        return _zigbee_swig.frame_length_detector_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(frame_length_detector_sptr self, int which) -> float
        pc_input_buffers_full_var(frame_length_detector_sptr self) -> pmt_vector_float
        """
        return _zigbee_swig.frame_length_detector_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(frame_length_detector_sptr self, int which) -> float
        pc_output_buffers_full(frame_length_detector_sptr self) -> pmt_vector_float
        """
        return _zigbee_swig.frame_length_detector_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(frame_length_detector_sptr self, int which) -> float
        pc_output_buffers_full_avg(frame_length_detector_sptr self) -> pmt_vector_float
        """
        return _zigbee_swig.frame_length_detector_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(frame_length_detector_sptr self, int which) -> float
        pc_output_buffers_full_var(frame_length_detector_sptr self) -> pmt_vector_float
        """
        return _zigbee_swig.frame_length_detector_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(frame_length_detector_sptr self) -> float"""
        return _zigbee_swig.frame_length_detector_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(frame_length_detector_sptr self) -> float"""
        return _zigbee_swig.frame_length_detector_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(frame_length_detector_sptr self) -> float"""
        return _zigbee_swig.frame_length_detector_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(frame_length_detector_sptr self) -> float"""
        return _zigbee_swig.frame_length_detector_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(frame_length_detector_sptr self) -> float"""
        return _zigbee_swig.frame_length_detector_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(frame_length_detector_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _zigbee_swig.frame_length_detector_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(frame_length_detector_sptr self)"""
        return _zigbee_swig.frame_length_detector_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(frame_length_detector_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _zigbee_swig.frame_length_detector_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(frame_length_detector_sptr self) -> int"""
        return _zigbee_swig.frame_length_detector_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(frame_length_detector_sptr self) -> int"""
        return _zigbee_swig.frame_length_detector_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(frame_length_detector_sptr self, int priority) -> int"""
        return _zigbee_swig.frame_length_detector_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(frame_length_detector_sptr self) -> std::string"""
        return _zigbee_swig.frame_length_detector_sptr_name(self)

    def symbol_name(self):
        """symbol_name(frame_length_detector_sptr self) -> std::string"""
        return _zigbee_swig.frame_length_detector_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(frame_length_detector_sptr self) -> io_signature_sptr"""
        return _zigbee_swig.frame_length_detector_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(frame_length_detector_sptr self) -> io_signature_sptr"""
        return _zigbee_swig.frame_length_detector_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(frame_length_detector_sptr self) -> long"""
        return _zigbee_swig.frame_length_detector_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(frame_length_detector_sptr self) -> basic_block_sptr"""
        return _zigbee_swig.frame_length_detector_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(frame_length_detector_sptr self, int ninputs, int noutputs) -> bool"""
        return _zigbee_swig.frame_length_detector_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(frame_length_detector_sptr self) -> std::string"""
        return _zigbee_swig.frame_length_detector_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(frame_length_detector_sptr self, std::string name)"""
        return _zigbee_swig.frame_length_detector_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(frame_length_detector_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _zigbee_swig.frame_length_detector_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(frame_length_detector_sptr self) -> swig_int_ptr"""
        return _zigbee_swig.frame_length_detector_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(frame_length_detector_sptr self) -> swig_int_ptr"""
        return _zigbee_swig.frame_length_detector_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(frame_length_detector_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _zigbee_swig.frame_length_detector_sptr_message_subscribers(self, *args, **kwargs)

frame_length_detector_sptr_swigregister = _zigbee_swig.frame_length_detector_sptr_swigregister
frame_length_detector_sptr_swigregister(frame_length_detector_sptr)

frame_length_detector_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
frame_length_detector = frame_length_detector.make;

class noncoherent_detector(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int const Q, pmt_vector_cfloat symbol_table, int preset_N) -> noncoherent_detector_sptr

        Return a shared_ptr to a new instance of zigbee::noncoherent_detector.

        To avoid accidental use of raw pointers, zigbee::noncoherent_detector's constructor is in a private implementation class. zigbee::noncoherent_detector::make is the public interface for creating new instances.

        Params: (Q, symbol_table, preset_N)
        """
        return _zigbee_swig.noncoherent_detector_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _zigbee_swig.delete_noncoherent_detector
    __del__ = lambda self : None;
noncoherent_detector_swigregister = _zigbee_swig.noncoherent_detector_swigregister
noncoherent_detector_swigregister(noncoherent_detector)

def noncoherent_detector_make(*args, **kwargs):
  """
    noncoherent_detector_make(int const Q, pmt_vector_cfloat symbol_table, int preset_N) -> noncoherent_detector_sptr

    Return a shared_ptr to a new instance of zigbee::noncoherent_detector.

    To avoid accidental use of raw pointers, zigbee::noncoherent_detector's constructor is in a private implementation class. zigbee::noncoherent_detector::make is the public interface for creating new instances.

    Params: (Q, symbol_table, preset_N)
    """
  return _zigbee_swig.noncoherent_detector_make(*args, **kwargs)

class noncoherent_detector_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::zigbee::noncoherent_detector)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::zigbee::noncoherent_detector)> self) -> noncoherent_detector_sptr
        __init__(boost::shared_ptr<(gr::zigbee::noncoherent_detector)> self, noncoherent_detector p) -> noncoherent_detector_sptr
        """
        this = _zigbee_swig.new_noncoherent_detector_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(noncoherent_detector_sptr self) -> noncoherent_detector"""
        return _zigbee_swig.noncoherent_detector_sptr___deref__(self)

    __swig_destroy__ = _zigbee_swig.delete_noncoherent_detector_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(noncoherent_detector_sptr self, int const Q, pmt_vector_cfloat symbol_table, int preset_N) -> noncoherent_detector_sptr

        Return a shared_ptr to a new instance of zigbee::noncoherent_detector.

        To avoid accidental use of raw pointers, zigbee::noncoherent_detector's constructor is in a private implementation class. zigbee::noncoherent_detector::make is the public interface for creating new instances.

        Params: (Q, symbol_table, preset_N)
        """
        return _zigbee_swig.noncoherent_detector_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(noncoherent_detector_sptr self) -> unsigned int"""
        return _zigbee_swig.noncoherent_detector_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(noncoherent_detector_sptr self, int which, int delay)
        declare_sample_delay(noncoherent_detector_sptr self, unsigned int delay)
        """
        return _zigbee_swig.noncoherent_detector_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(noncoherent_detector_sptr self, int which) -> unsigned int"""
        return _zigbee_swig.noncoherent_detector_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(noncoherent_detector_sptr self) -> int"""
        return _zigbee_swig.noncoherent_detector_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(noncoherent_detector_sptr self) -> double"""
        return _zigbee_swig.noncoherent_detector_sptr_relative_rate(self)

    def start(self):
        """start(noncoherent_detector_sptr self) -> bool"""
        return _zigbee_swig.noncoherent_detector_sptr_start(self)

    def stop(self):
        """stop(noncoherent_detector_sptr self) -> bool"""
        return _zigbee_swig.noncoherent_detector_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(noncoherent_detector_sptr self, unsigned int which_input) -> uint64_t"""
        return _zigbee_swig.noncoherent_detector_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(noncoherent_detector_sptr self, unsigned int which_output) -> uint64_t"""
        return _zigbee_swig.noncoherent_detector_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(noncoherent_detector_sptr self) -> int"""
        return _zigbee_swig.noncoherent_detector_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(noncoherent_detector_sptr self, int m)"""
        return _zigbee_swig.noncoherent_detector_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(noncoherent_detector_sptr self)"""
        return _zigbee_swig.noncoherent_detector_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(noncoherent_detector_sptr self) -> bool"""
        return _zigbee_swig.noncoherent_detector_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(noncoherent_detector_sptr self, int m)"""
        return _zigbee_swig.noncoherent_detector_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(noncoherent_detector_sptr self) -> int"""
        return _zigbee_swig.noncoherent_detector_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(noncoherent_detector_sptr self, int i) -> long"""
        return _zigbee_swig.noncoherent_detector_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(noncoherent_detector_sptr self, long max_output_buffer)
        set_max_output_buffer(noncoherent_detector_sptr self, int port, long max_output_buffer)
        """
        return _zigbee_swig.noncoherent_detector_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(noncoherent_detector_sptr self, int i) -> long"""
        return _zigbee_swig.noncoherent_detector_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(noncoherent_detector_sptr self, long min_output_buffer)
        set_min_output_buffer(noncoherent_detector_sptr self, int port, long min_output_buffer)
        """
        return _zigbee_swig.noncoherent_detector_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(noncoherent_detector_sptr self) -> float"""
        return _zigbee_swig.noncoherent_detector_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(noncoherent_detector_sptr self) -> float"""
        return _zigbee_swig.noncoherent_detector_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(noncoherent_detector_sptr self) -> float"""
        return _zigbee_swig.noncoherent_detector_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(noncoherent_detector_sptr self) -> float"""
        return _zigbee_swig.noncoherent_detector_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(noncoherent_detector_sptr self) -> float"""
        return _zigbee_swig.noncoherent_detector_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(noncoherent_detector_sptr self) -> float"""
        return _zigbee_swig.noncoherent_detector_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(noncoherent_detector_sptr self, int which) -> float
        pc_input_buffers_full(noncoherent_detector_sptr self) -> pmt_vector_float
        """
        return _zigbee_swig.noncoherent_detector_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(noncoherent_detector_sptr self, int which) -> float
        pc_input_buffers_full_avg(noncoherent_detector_sptr self) -> pmt_vector_float
        """
        return _zigbee_swig.noncoherent_detector_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(noncoherent_detector_sptr self, int which) -> float
        pc_input_buffers_full_var(noncoherent_detector_sptr self) -> pmt_vector_float
        """
        return _zigbee_swig.noncoherent_detector_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(noncoherent_detector_sptr self, int which) -> float
        pc_output_buffers_full(noncoherent_detector_sptr self) -> pmt_vector_float
        """
        return _zigbee_swig.noncoherent_detector_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(noncoherent_detector_sptr self, int which) -> float
        pc_output_buffers_full_avg(noncoherent_detector_sptr self) -> pmt_vector_float
        """
        return _zigbee_swig.noncoherent_detector_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(noncoherent_detector_sptr self, int which) -> float
        pc_output_buffers_full_var(noncoherent_detector_sptr self) -> pmt_vector_float
        """
        return _zigbee_swig.noncoherent_detector_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(noncoherent_detector_sptr self) -> float"""
        return _zigbee_swig.noncoherent_detector_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(noncoherent_detector_sptr self) -> float"""
        return _zigbee_swig.noncoherent_detector_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(noncoherent_detector_sptr self) -> float"""
        return _zigbee_swig.noncoherent_detector_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(noncoherent_detector_sptr self) -> float"""
        return _zigbee_swig.noncoherent_detector_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(noncoherent_detector_sptr self) -> float"""
        return _zigbee_swig.noncoherent_detector_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(noncoherent_detector_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _zigbee_swig.noncoherent_detector_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(noncoherent_detector_sptr self)"""
        return _zigbee_swig.noncoherent_detector_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(noncoherent_detector_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _zigbee_swig.noncoherent_detector_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(noncoherent_detector_sptr self) -> int"""
        return _zigbee_swig.noncoherent_detector_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(noncoherent_detector_sptr self) -> int"""
        return _zigbee_swig.noncoherent_detector_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(noncoherent_detector_sptr self, int priority) -> int"""
        return _zigbee_swig.noncoherent_detector_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(noncoherent_detector_sptr self) -> std::string"""
        return _zigbee_swig.noncoherent_detector_sptr_name(self)

    def symbol_name(self):
        """symbol_name(noncoherent_detector_sptr self) -> std::string"""
        return _zigbee_swig.noncoherent_detector_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(noncoherent_detector_sptr self) -> io_signature_sptr"""
        return _zigbee_swig.noncoherent_detector_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(noncoherent_detector_sptr self) -> io_signature_sptr"""
        return _zigbee_swig.noncoherent_detector_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(noncoherent_detector_sptr self) -> long"""
        return _zigbee_swig.noncoherent_detector_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(noncoherent_detector_sptr self) -> basic_block_sptr"""
        return _zigbee_swig.noncoherent_detector_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(noncoherent_detector_sptr self, int ninputs, int noutputs) -> bool"""
        return _zigbee_swig.noncoherent_detector_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(noncoherent_detector_sptr self) -> std::string"""
        return _zigbee_swig.noncoherent_detector_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(noncoherent_detector_sptr self, std::string name)"""
        return _zigbee_swig.noncoherent_detector_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(noncoherent_detector_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _zigbee_swig.noncoherent_detector_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(noncoherent_detector_sptr self) -> swig_int_ptr"""
        return _zigbee_swig.noncoherent_detector_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(noncoherent_detector_sptr self) -> swig_int_ptr"""
        return _zigbee_swig.noncoherent_detector_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(noncoherent_detector_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _zigbee_swig.noncoherent_detector_sptr_message_subscribers(self, *args, **kwargs)

noncoherent_detector_sptr_swigregister = _zigbee_swig.noncoherent_detector_sptr_swigregister
noncoherent_detector_sptr_swigregister(noncoherent_detector_sptr)

noncoherent_detector_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
noncoherent_detector = noncoherent_detector.make;



